<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on The Impatient Software Engineer</title><link>https://prateeknischal.github.io/posts/</link><description>Recent content in Posts on The Impatient Software Engineer</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 12 Aug 2021 01:05:22 +0530</lastBuildDate><atom:link href="https://prateeknischal.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Trust the Certs</title><link>https://prateeknischal.github.io/posts/trust-the-certs/</link><pubDate>Thu, 12 Aug 2021 01:05:22 +0530</pubDate><guid>https://prateeknischal.github.io/posts/trust-the-certs/</guid><description>Why do you remember certificates As an IT professional, you might have come across this error while browsing sites of setting up your local development environment. As a fix, you would have been recommended to go to the advanced option in this error and accept the risk and allow the website to work. Your browser may still warn you by displaying the lock on the ominbar of your website as red or unsafe, but you choose to ignore it and not deal with it.
Why do you see this error? Browsers don&amp;rsquo;t do a very good job of explaining the error upfront.</description></item><item><title>Test before you Go and Commit</title><link>https://prateeknischal.github.io/posts/pre-commit-workflow/</link><pubDate>Sun, 01 Nov 2020 01:04:22 +0530</pubDate><guid>https://prateeknischal.github.io/posts/pre-commit-workflow/</guid><description>There is a certain confidence boost when you see that message &amp;ldquo;All tests pass&amp;rdquo;, unless you are like me and get lazy, skimping on writing good tests for your logic. There are a lot of tools integrated with github, gitlab and probably other git interfaces that run a set of pre-defined tasks before potentially allowing you to raise a PR or mark it safe for merge. For the uninitiated, it&amp;rsquo;s know as CI or continuous integration tools. For example,
Azure pipelines Github actions CicleCI TravisCI What if you could run those tests, lint checks and other stuff before you push your commit and realize it&amp;rsquo;s going to fail in your CI pipeline and make you look like a n00b.</description></item><item><title>I C and .so Does Rust</title><link>https://prateeknischal.github.io/posts/i-c-and-so-does-rust/</link><pubDate>Tue, 08 Sep 2020 01:03:26 +0530</pubDate><guid>https://prateeknischal.github.io/posts/i-c-and-so-does-rust/</guid><description>Distributing software is a tricky thing. If you want to share the functionality with someone you may share the source with them and give them the build instructions and it would all play out good. But that may not be the case if the source is a different language and the consumer is using a different language. For example, there are a lot of libraries that use common functionalities like openssl for crypto operations or network libraries or packages like zlib just because they are reliable and have been tested for years on speed and correctness. You might not want to translate it in the language of your choice.</description></item><item><title>Go Use Those Traits</title><link>https://prateeknischal.github.io/posts/go-use-those-traits/</link><pubDate>Sun, 30 Aug 2020 01:06:21 +0530</pubDate><guid>https://prateeknischal.github.io/posts/go-use-those-traits/</guid><description>Interfaces were popularized by Java but originally came from Objective-C (source).Until a few days ago I did not realize how powerful they were. In my opinion, interfaces have been potrayed in an incomplete manner by all the tutorials. The key idea is correct but it limits the thinking of what it can be used for.
I am sure everyone who has written some form of object oriented language would know this example.
public interface Animal { public String speak(); } public class Cat implements Animal { public String speak() { return &amp;quot;I am a God !&amp;quot;; } } public class Dog implements Animal { public String speak() { return &amp;quot;Where's my hooman !</description></item><item><title>Apache Thrift Over Unix Sockets in Rust</title><link>https://prateeknischal.github.io/posts/apache-thrift-over-unix-sockets/</link><pubDate>Sat, 01 Aug 2020 01:02:18 +0530</pubDate><guid>https://prateeknischal.github.io/posts/apache-thrift-over-unix-sockets/</guid><description>Apache Thrift is an interace defintion language and binary communication protocol use for defining and creating services for all the numerous supported languages. It forms an RPC framework avoiding the usual microservices HTTP style messaging making it a bit more efficient avoiding all that HTTP overhead.
Thrift was developed at facebook. Now I have some views about facebook due to their primary product which is quite stupid (the users), the social network, not the movie but the website, facebook.com. It has almost no credibility for common people, nothing useful, full of memes (which are hilarious by the way if you find your way to some awesome math meme pages) and a serious time killer.</description></item><item><title>Re-ally Fast</title><link>https://prateeknischal.github.io/posts/re-ally-fast/</link><pubDate>Wed, 29 Jul 2020 01:00:53 +0530</pubDate><guid>https://prateeknischal.github.io/posts/re-ally-fast/</guid><description>Lately I have been trying to get into the Rust ecosystem to get a feel of the tools and the language. In the process I came across a few tools that I would highly recommend to try out.
ripgrep - A blazing fast alternative to GNU grep alacritty - A GPU accelerated terminal emulator exa - A replacement for ls written in Rust The tools exa is for a more pretty ls, may not appeal to everyone. Similar is the case for alacritty, it is intended to be used by people who are comfortable with tmux as it doesn&amp;rsquo;t have tabs, kind of a bummer but if you roll with tmux, it should not make any difference anyways.</description></item><item><title>Boredom during COVID19</title><link>https://prateeknischal.github.io/posts/boredem-during-covid19/</link><pubDate>Sun, 26 Jul 2020 00:43:30 +0530</pubDate><guid>https://prateeknischal.github.io/posts/boredem-during-covid19/</guid><description>After weeks of hunting for something to do (which is actually on-and-off) and on absolutely no demand, I will be trying to write my experiences and fears as a software engineer, or anything that I have learnt or learning. Also, it will let me use this site a personal cache of things that I have learnt and i know where to look instead of doing all of the research again.
This may turn into such a disaster that people at ARPA may start contemplating about their work !
Disclaimer These entries are more like logs and not meant for technical depth or accuracy These blog entries would be more like logs and not meant for technical depth on any matter mentioned in the blog and may not guarantee correctness of the subject matter.</description></item></channel></rss>